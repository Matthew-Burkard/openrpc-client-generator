@rpcClient(transport, "{{ class_prefix + "." if class_prefix else "" }}", [{{ skip_methods }}])
{{ "" if class_prefix else "export " }}class {{ class_prefix }}{{ cs.to_pascal(group.title) }}Client {

{# Declare child client properties. #}
{% with class_prefix=cs.to_pascal(group.title) %}
  {% for group in group.child_groups.values() %}
    public {{ cs.to_camel(class_prefix + group.title) }}Client: {{ class_prefix }}{{ cs.to_pascal(group.title) }}Client;
  {% endfor %}
{% endwith %}

{# Populate child client properties in constructor. #}
{% if group.child_groups %}
  constructor() {
    {% with class_prefix=cs.to_pascal(group.title) %}
      {% for group in group.child_groups.values() %}
    this.{{ cs.to_camel(class_prefix + group.title) }}Client = new {{ class_prefix }}{{ cs.to_pascal(group.title) }}Client();
      {% endfor %}
    {% endwith %}
  }
{% endif %}

{# Method Declarations #}
{% for method in group.methods %}
  public async {{ cs.to_camel(method.name) or "_" }}(
  {% for param in method.params %}
    {{ cs.to_camel(param.name) }}: {{ ts_type(param.schema_) }}
    {% if not loop.last %}
        ,
    {% endif %}
  {% endfor %}
  // @ts-ignore
  ): Promise<{{ ts_type(method.result.schema_) }}> {}
{% endfor %}

{# WebSocket Client Connect Methods #}
{% if indent == "" and transport == "WS" %}
  /**
   * Connect to WebSocket server.
   */
  public connect() {
    transport.connect();
  }

  /**
   * Close connection to WebSocket server.
   */
  public close() {
    transport.close();
  }
{% endif %}
}

{# Child Clients #}
{% with class_prefix=group.name %}
    {% for group in group.child_groups.values() %}
        {% include "typescript/client.j2" %}
    {% endfor %}
{% endwith %}
