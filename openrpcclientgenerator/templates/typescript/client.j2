@rpcClient(
  transport,
  "",
  [
  {% if not class_prefix %}
  {{ skip_methods }}
  {% endif %}
  ],
  {
  {% for name, method in group.methods.items() %}
  {% if name != method.name.replace('"', '\\"') %}
    "{{ cs.to_camel(name) or "method" }}": "{{ method.name.replace('"', '\\"') }}"{% if not loop.last %},{% endif %}
  {% endif %}
  {% endfor %}

  }
)
{{ "" if class_prefix else "export " }}class {{ cs.to_pascal(class_prefix or "") }}{{ cs.to_pascal(group.name) }}Client {

{# Declare child client properties. #}
  {% with class_prefix=cs.to_pascal(group.name) %}
  {% for group in group.child_groups.values() %}
  public {{ cs.to_camel(group.name) }}: {{ class_prefix }}{{ cs.to_pascal(group.name) }}Client;
  {% endfor %}
  {% endwith %}

{# Populate child client properties in constructor. #}
  {% if group.child_groups %}
  constructor(headers: object = {}) {
    transport.headers = headers;
    {% with class_prefix=cs.to_pascal(group.name) %}
    {% for group in group.child_groups.values() %}
    this.{{ cs.to_camel(group.name) }} = new {{ class_prefix }}{{ cs.to_pascal(group.name) }}Client();
    {% endfor %}
    {% endwith %}
  }
  {% endif %}

{# Method Declarations #}
  {% for name, method in group.methods.items() %}
  public async {{ cs.to_camel(name) or "method" }}(
    {% for param in method.params %}
    {{ cs.to_camel(param.name) }}: {{ ts_type(param.schema_) }}{% if not loop.last %},{% endif %}
    {% endfor %}
  // @ts-ignore
  ): Promise<{{ ts_type(method.result.schema_) }}> {}
  {% endfor %}

{# WebSocket Client Connect Methods #}
  {% if not class_prefix and transport == "WS" %}
  /**
   * Connect to WebSocket server.
   */
  public connect() {
    transport.connect();
  }

  /**
   * Close connection to WebSocket server.
   */
  public close() {
    transport.close();
  }
  {% endif %}
}

{# Child Clients #}
{% with class_prefix=group.name %}
    {% for group in group.child_groups.values() %}
        {% include "typescript/client.j2" %}
    {% endfor %}
{% endwith %}
